import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const url = searchParams.get('url');

  if (!url) {
    return NextResponse.json({ error: 'URL parameter is required' }, { status: 400 });
  }

  try {
    // Validate URL format
    new URL(url);
  } catch {
    return NextResponse.json({ error: 'Invalid URL format' }, { status: 400 });
  }

  try {
    console.log(`Generating simple PDF for: ${url}`);

    // Fetch the webpage content with timeout using AbortController
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 30000);

    const response = await fetch(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      },
      signal: controller.signal,
    });

    clearTimeout(timeoutId);

    if (!response.ok) {
      throw new Error(`Failed to fetch URL: ${response.status} ${response.statusText}`);
    }

    const html = await response.text();

    // Create a simple HTML to PDF conversion
    // This is a basic implementation - for production, consider using a proper PDF library
    const pdfContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>PDF Export</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { text-align: center; margin-bottom: 30px; }
        .content { line-height: 1.6; }
        .footer { text-align: center; margin-top: 30px; font-size: 12px; color: #666; }
    </style>
</head>
<body>
    <div class="header">
        <h1>Webpage Export</h1>
        <p>Generated from: ${url}</p>
        <p>Date: ${new Date().toLocaleString()}</p>
    </div>
    <div class="content">
        <h2>Page Content</h2>
        <p>This is a simplified export of the webpage. For full PDF generation with styling and images, please use the main PDF API endpoint.</p>
        <hr>
        <div>${html.substring(0, 2000)}...</div>
    </div>
    <div class="footer">
        <p>Generated by Next.js PDF Service</p>
    </div>
</body>
</html>`;

    // Return HTML content that can be converted to PDF by the client
    const headers = new Headers();
    headers.set('Content-Type', 'text/html');
    headers.set('Content-Disposition', 'attachment; filename="webpage-export.html"');

    return new NextResponse(pdfContent, {
      headers,
    });

  } catch (error) {
    console.error('Error generating simple PDF:', error);
    
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    
    return NextResponse.json({ 
      error: 'Failed to generate PDF', 
      details: errorMessage,
      timestamp: new Date().toISOString(),
      suggestion: 'This is a simplified export. For full PDF generation, ensure Chrome is available or use a different service.',
      alternative: 'Try the main PDF endpoint or use a client-side PDF generation library'
    }, { status: 500 });
  }
}
